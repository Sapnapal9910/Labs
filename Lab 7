Question 1-->
Write a Java program to append the specified element to the end of a HashSet.
( use add() method)

Answer 1--->
package statedemo;

import java.util.HashSet;

public class AppendToHashSet {
    public static void main(String[] args) {
                                                                                                           // Create a HashSet and add some initial elements
        HashSet<String> fruits = new HashSet<>();
        fruits.add("Apple");
        fruits.add("Banana");
        fruits.add("Orange");

                                                                                                   // Display the HashSet before adding a new element
        System.out.println("HashSet before adding: " + fruits);

                                                                                                              // Append a new element to the HashSet
        String newElement = "Grapes";
        boolean isAdded = fruits.add(newElement);

                                                                                                               // Check if the element was successfully added
        if (isAdded) {
            System.out.println(newElement + " added to the HashSet.");
        } else {
            System.out.println(newElement + " is already present in the HashSet.");
        }

                                                                                                            // Display the HashSet after adding the new element
        System.out.println("HashSet after adding: " + fruits);
    }
}
Output --->
HashSet before adding: [Apple, Orange, Banana]
Grapes added to the HashSet.
HashSet after adding: [Apple, Grapes, Orange, Banana]

Question 2---->
Write a program to declare stack. Store 10 elements into it. display stack elements.
Remove 4 elements from stack and display it again.

Answer 2--->

package statedemo;
import java.util.Stack;
public class StackExample1 {
    public static void main(String[] args) {
                                                                                                             // Declare a stack
        Stack<Integer> stack = new Stack<>();

                                                                                                              // Store 10 elements into the stack
        for (int i = 1; i <= 10; i++) {
            stack.push(i);
        }

                                                                                                                // Display the stack elements
        System.out.println("Stack after adding 10 elements: " + stack);

                                                                                                                        // Remove 4 elements from the stack
        for (int i = 0; i < 4; i++) {
            if (!stack.isEmpty()) {
                System.out.println("Removed element: " + stack.pop());
            }
        }

                                                                                                                  // Display the stack elements again
        System.out.println("Stack after removing 4 elements: " + stack);
    }
}
Output--->
Removed element: 10
Removed element: 9
Removed element: 8
Removed element: 7
Stack after removing 4 elements: [1, 2, 3, 4, 5, 6]
